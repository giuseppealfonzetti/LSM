---
title: "Introduction to R"
subtitle: "Laboratory of Statistics and Mathematics 2025/2026"
author: Giuseppe Alfonzetti
format: 
  revealjs:
    slide-number: true
    incremental: false   
    footer: "Course Introduction"
    theme: ../themes/slides_theme.scss
    transition: convex
    transition-speed: fast
title-slide-attributes:
    data-background-color: "#1565C0"
    data-footer: " "
embed-resources: true
highlight-style: tango

---




```{r load}
library(tidyverse)
```

## Our goal

#### The data analysis pipeline:

![](../assets/ds_life_cycle.png){width=100% fig-align="center"}

## Import

You will learn how to read external data sources from R. In particular, we will focus on 

- Universal text formats, as .csv.
- Proprietary spreadsheets formats, as Excel .xls and .xlsx;

## Tidy {style="font-size: 0.8em;"}

You will know hot to store your data in a cosistent format. 

- Each row is an observation; 
- Each column a variable, with a unique name. 
- Each variable has a specific type (numeric, chracter, logical, etc..).

```{r tidy}
mpg |> select(manufacturer, displ, model, class, cyl, trans, hwy)
```


## Transform {style="font-size: 0.8em;"}

You will learn how to transform the data at your willingness: 

- Select the variables of interest;
- Combine existing variables in new variables; 
- Filter relevant observations;
- Reshape data;

```{r transform}
mpg |> 
  select(displ, class, hwy)
```

## Visualize {style="font-size: 0.8em;"}

You will learn how to explore data patterns with visualisations.

```{r visualise}
mpg |> 
  select(manufacturer, displ, model, class, cyl, trans, hwy) |> 
  ggplot(aes(x=displ, y=hwy)) +
  geom_point(aes(col=class), size=2)+
  theme_minimal()+
  labs(y="Fuel effciency (miles per gallon)", x="Engine size (liters)", col ="Car Type:" )
```

## Model {style="font-size: 0.8em;"}

It's the only step where "math" enters the game. Goes from simple descriptive statistics, to more elaborated modelling strategies.
Often combined with visualisations. 

```{r model}
mpg |> 
  select(manufacturer, displ, model, class, cyl, trans, hwy) |> 
  ggplot(aes(x=displ, y=hwy)) +
  geom_point(aes(col=class), size=2, alpha=0.5)+
  geom_smooth(aes(col=class), method = lm, se=FALSE) +
  theme_minimal()+
  labs(y="Fuel effciency (miles per gallon)", x="Engine size (liters)", col ="Car Type:" )
```
## Communicate


- Write reports;
- Choose appropriate viasualizations;
- Highilight the results in terms of insights.



## Why R?

. . .

::: {.r-fit-text .r-stretch}
Replicability!
:::


## Excel vs R {style="font-size: 0.6em;"}

- Consider creating a new variable in your dataset:

![](../assets/class1/dragformula1.gif){width=100% fig-align="center"}

. . .

- Now you share your spreadsheet with your colleague. 

. . .

- She will not know the formula within each cell unless she inspect all of them individually!

## Excel vs R {style="font-size: 0.6em;"}

```{r}
my_data <- tibble("QuantityA" = c(50, 90, 10, 30),
"QuantityB" = c(20, 25, 45, 15))
```

- Consider the same data in R, stored in the object `my_data`

```{r echo=TRUE}
my_data 
```

. . .

- You can create the same `Tot` column you had before in Excel with

```{r echo=TRUE}
my_data |> 
  mutate(Tot = QuantityA + QuantityB)
```

. . .

- And now your colleague has no doubt about where those numbers come from!

## Excel VS R {style="font-size: 0.6em;"}

- You are interested in computing the total number of products sold by each representative:

![](../assets/class1/pivot1.gif){width=100% fig-align="center"}

. . . 

- That's a lot of point-and-clicks! 

. . .

- Will your colleague be able to reproduce your results?

## Excel VS R {style="font-size: 0.6em;"}

```{r}
my_data2 <- tibble(
  SalesRepresentative = c("Eleonor", "Elizabeth", "John", "Matt", "Eleonor", "Elizabeth", "John", "Matt", "Eleonor", "Elizabeth"),
  Product = c("A", "B", "C", "A", "A", "C", "B", "B", "A", "C"), 
  QuantitySold=c(50, 90, 10, 34, 5, 8, 20, 5, 15, 45),
  Region = c("IT", "UK", "FR", "DE", "IT", "IT", "UK", "UK", "UK", "DE"))
```

Consider the same dataset in R stored in the new object `my_data2`:

```{r echo=TRUE}
my_data2
```


. . .

You get the same results seen in Excel by running 

```{r echo=TRUE}
my_data2 |> 
  group_by(SalesRepresentative) |> 
  summarise(Total = sum(QuantitySold))
```

# Hands-on {background="#1565C0"}

## Access R from Web

- Connect to [https://giuseppealfonzetti.github.io/LSM/](https://giuseppealfonzetti.github.io/LSM/)

- Click on the "Material" [(ðŸ’»)](https://giuseppealfonzetti.github.io/LSM/class1.html) icon corresponding to today lab.

- Access the interactive web console.

## Basic R grammar {style="font-size: 0.5em;"}
- Run a command: 
  - Get the cursor on the line and press CTRL+ENTER on Windows, or CMD+ENTER on MacOS.

- Assign a value to an object

```{r echo = TRUE}
a = 1                            # numeric value assigned with = 
b <- 2                           # numeric value assigne with <- 
c <- "ciao"                      # character value 
c                                # display the content stored in c
```

- Basic math

```{r, echo = TRUE}
a+b                              # sum the values stored in a and b
```

- Create a vector


```{r echo = TRUE}
v1 <- c(1, 7, 2)                 # create the vector manually
v2 <- 1:10                       # create a sequence 1 to 10 automatically
v3 <- seq(1,10,by=2)             # create a sequence automatically with the seq() function
```

- Seek help

```{r echo=TRUE}
?seq()                           # R will show you the documentation of the seq function
```

- Create and inspect matrices


```{r echo=TRUE}
m <- matrix(1:6, nrow=2, ncol=3) # create a matrix
nrow(m)                          # inspect the number of rows
ncol(m)                          # inspect the number of columns
m[1,2]                           # display element on the first row, at the second column
```

## Quick visualization {style="font-size: 0.5em;"}

Some test datasets are preloaded in R. That's the case of `iris`, a famous dataset about iris flower dimensions

```{r echo=TRUE}
head(iris)
```

You can easily visualise petal dimension distribution yourself by using the `ggplot2`package. Don't worry about understanding the syntax for now!

```{r echo=TRUE}
ggplot(data=iris, aes(x=Petal.Length, y=Petal.Width)) + geom_point(aes(col=Species))
```

